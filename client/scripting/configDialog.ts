import { renderApplicationCards } from "./applications"
import { openSnackbar, closeSnackbar } from "./snackbars"
import { renderDirectoryPicker } from "./applicationDirectoryPicker"
import { handleResponse, CONSTANTS, headers} from "./service";

const {CLICK, UNCONFIGURED, STOPPED} = CONSTANTS;
const {GRAY} = CONSTANTS.SNACKBAR_COLORS

// CSS class/id constants
const COMMANDS_INPUT = 'commandsInput';
const APPLICATION_CHILD_DIRECTORY_INPUT = 'applicationChildDirectoryInput';
const APPLICATION_START_SCRIPT_INPUT = 'applicationStartScriptInput';
const DIRECTORY_TO_SERVE = 'directoryToServe';
const PORT_INPUT = 'portInput';
const REROUTE_DEFAULT_PATH_TO = 'rerouteDefaultPathTo';
const CREATE_SHORTCUT_INPUT = 'createShortcutInput';
const UPLOAD_FAVICON_INPUT = 'uploadFaviconInput';

// configDialog state
let configDialogState:any = {}

export async function openConfigDialog(application){
    configDialogState = {...configDialogState, application}

    // create dialog header
    const dialogHeader = `
    <header>
        <h2 class='config-dialog-header'>Application Configuration</h2>
        <button>&#10006;</button>
    </header>
    `


    // create an application setup section
    const applicationSetupTooltipMessage = 'Use this to run commands such as "npm install" or "npm build". Commands are run in the root folder of the application. If commands need to be run in child directories, type the directory name, seperated by forward slashes "/".';
    const applicationSetupTemplate = `
        <div class='config-application-setup'>
            <h3>
                Application Setup 
                ${renderTooltipElement(applicationSetupTooltipMessage)}
            </h3>

            <label>Commands to Run</label>
            <input id='${COMMANDS_INPUT}' placeholder='Commands to Run' />

            <label>Child Directory (optional)</label>
            <input id='${APPLICATION_CHILD_DIRECTORY_INPUT}' placeholder='e.g. subfolder/anotherFolder' />

            <button>Run Commands</button>
        </div>
    `


    // modify application start script
    const configStartScriptTooltipMessage  = `The command used to start the application e.g. "node index.js" or "py script.py". If you're using the serving file generated by the manager, this value should be "local-selfhosting-serve-file.js".`;
    const configStartScriptTemplate = `
    <div class='config-application-start-script'>
        <h3>
            Application Start Script 
            ${renderTooltipElement(configStartScriptTooltipMessage)}
        </h3>
        <input id='${APPLICATION_START_SCRIPT_INPUT}' value='${returnIfExists(application.startScript)}' placeholder='Application Start Script' />
        <button>modify</button>
    </div>
    `


    // create "add serving file section"
    const addServingFileTooltipMessage = `Add a file that serves application clients. Useful for projects that don't serve themselves e.g. standalone React applications.`;
    const addServingFileTemplate = `
    <div class='config-serving-file'>
        <h3>
            Create Serving File 
            ${renderTooltipElement(addServingFileTooltipMessage)}
        </h3>
        <label>Directory to Serve</label>
        <input id='${DIRECTORY_TO_SERVE}' value='${returnIfExists(application.serveFrom)}' placeholder='Directory to serve e.g. build, dist. Leave blank if root directory' />

        <label>Port to host on</label>
        <input id='${PORT_INPUT}' value='${returnIfExists(application.shortcutPort)}' placeholder='Port to host on' />

        <label>Reroute default path to</label>
        <input id='${REROUTE_DEFAULT_PATH_TO}' value='${returnIfExists(application.rerouteDefaultPathTo)}' placeholder='Reroute default path to this file (optional)' />
        <button>Add Serving File</button>
    </div>
    `


    // create shortcut button
    const createShortcutTooltipMessage = `Creates a shortcut on your desktop that links to the URL of this application.`;
    const createShortcutTemplate = `
    <div class='create-shortcut-div'>
        <h3>
            Create Shortcut
            ${renderTooltipElement(createShortcutTooltipMessage)}
        </h3>
        <label>Application Port</label>
        <input id='${CREATE_SHORTCUT_INPUT}' value='${returnIfExists(application.shortcutPort)}' placeholder='Application Port Number' />
        <button>Create Shortcut</button>
    </div>
    `

    // create a favicon upload 
    const uploadFaviconTooltipMessage = `Change/upload a favicon to this application`;
    const uploadFaviconTemplate = `
    <div class='upload-favcion-div'>
        <h3>
            Upload Favicon
            ${renderTooltipElement(uploadFaviconTooltipMessage)}
        </h3>
        <label>Select File</label>
        <input id='${UPLOAD_FAVICON_INPUT}' accept='image/x-icon' type='file' />
        <button>Upload</button>
    </div>
    `


    // append everything to DOM

    document.body
        .insertAdjacentHTML(
            'beforeend', 
            
            `
            <div class='config-dialog-backdrop'>
                <div class='center-column-layout config-dialog-body dialog-body'>
                ${dialogHeader}
                ${applicationSetupTemplate}
                ${configStartScriptTemplate}
                ${addServingFileTemplate}
                ${createShortcutTemplate}
                ${uploadFaviconTemplate}
                </div>
            </div>
            `
        );
    

    document.getElementById(APPLICATION_CHILD_DIRECTORY_INPUT).addEventListener(CLICK, async (e) => await getDirectoryValue(e, APPLICATION_CHILD_DIRECTORY_INPUT, false));

    document.getElementById(APPLICATION_START_SCRIPT_INPUT).addEventListener(CLICK, async (e) => await getDirectoryValue(e, APPLICATION_START_SCRIPT_INPUT, true));

    document.getElementById(DIRECTORY_TO_SERVE).addEventListener(CLICK, async (e) => await getDirectoryValue(e, DIRECTORY_TO_SERVE, false));

    document.getElementById(REROUTE_DEFAULT_PATH_TO).addEventListener(CLICK, async (e) => await getDirectoryValue(e, REROUTE_DEFAULT_PATH_TO, true));

    document.querySelector('.config-application-start-script button').addEventListener(CLICK, () => modifyStartScript(getInputValue(APPLICATION_START_SCRIPT_INPUT)));

    document.querySelector('.config-serving-file button').addEventListener(CLICK, () => 
        addServingFile(
            configDialogState.application.id,
            getInputValue(DIRECTORY_TO_SERVE),
            getInputValue(REROUTE_DEFAULT_PATH_TO),
            getInputValue(PORT_INPUT)
        )
    );

    document.querySelector('.config-application-setup button').addEventListener(CLICK, () =>  
        applicationSetup(
            application.id, 
            getInputValue(COMMANDS_INPUT), 
            getInputValue(APPLICATION_CHILD_DIRECTORY_INPUT)
        )
    );

    document.querySelector('.create-shortcut-div button').addEventListener(CLICK, () => createApplicationShortcut(application, getInputValue(CREATE_SHORTCUT_INPUT)));

    document.querySelector('.config-dialog-body .upload-favcion-div button').addEventListener(CLICK, () => {
        const blob = document.getElementById(UPLOAD_FAVICON_INPUT)['files'][0];
        uploadFavicon(application, blob);
    })
    
    document.querySelector('.config-dialog-body header button').addEventListener(CLICK, closeConfigDialog);
}

export function closeConfigDialog(){
    // reset configDialogState
    configDialogState = {};

    // remove dialog from dialog
    document.querySelector('body').removeChild(document.querySelector('.config-dialog-backdrop'));
}

async function applicationSetup(application:string, commands:string, childDirectory:string){
    const initialSnackbar = 
        openSnackbar(
            `Running ${commands} in ${ childDirectory ? childDirectory : application}`,
            GRAY
        );

    const request = await fetch(
        '/api/application/setup',
        {
            method:'POST',
            body:JSON.stringify({
                commands,
                application: childDirectory ? childDirectory : application
            }),
            headers
        }
    );
    const response = await request.json();

    closeSnackbar(initialSnackbar);

    handleResponse(response);
}

async function addServingFile(applicationId:string, serveFrom:string, rerouteDefaultPathTo:string, port:string){
    const request = await fetch(
        '/api/application/serve-file',
        {
            method:'POST',
            body:JSON.stringify({
                applicationId,
                serveFrom: serveFrom ? serveFrom : '.',
                rerouteDefaultPathTo,
                port
            }),
            headers
        }
    );
    const response = await request.json();

    const modifyShortcutPort = await fetch(
        `/api/application/${applicationId}`,
        {
            method:'PUT',
            body:JSON.stringify({
                updatedValues:{
                    serveFrom,
                    rerouteDefaultPathTo,
                    shortcutPort:port
                }
            }),
            headers
        }
    );
    
    handleResponse(response);
}

async function modifyStartScript(startScript:string){

    let updatedValues:{startScript:string, status?: string} = {
        startScript
    };

    if(configDialogState.application.status === UNCONFIGURED){
        updatedValues.status = STOPPED;
    }

    const request = await fetch(
        `/api/application/${configDialogState.application.id}`,
        {
            method:'PUT',
            body:JSON.stringify({
                updatedValues
            }),
            headers
        }
    );
    const response = await request.json();

    handleResponse(response, () => renderApplicationCards(response.table));
}

async function createApplicationShortcut(application, portNumber:string){
    const request = await fetch(
        '/api/application/create-shortcut',
        {
            method:'POST',
            body:JSON.stringify({
                shortcutName:application.id, 
                port:portNumber, 
                applicationId:application.id
            }),
            headers
        }
    );
    const response = await request.json();

    handleResponse(response);
}

async function uploadFavicon(application, blob:Blob){
    const reader = new FileReader();

    reader.onload = async (e) => {
        const dataUrl:any = e.target.result;
        const faviconData = dataUrl.replace(/.+base64,/, '');

        const applicationId = application.id;

        const request = await fetch(
            '/api/application/favicon',
            {
                method:'POST',
                body:JSON.stringify({applicationId, faviconData}),
                headers
            }
        );
        const response = await request.json();
        
        handleResponse(response, () => window.location.reload());
    }

    reader.readAsDataURL(blob);
}

async function openDirectoryPicker(application, renderFiles){
    return await renderDirectoryPicker(application.id, renderFiles);
}

function renderTooltipElement(message){
    return `<b>
        ?
        <span>
            ${message}
        </span>
    </b>`
}

function getInputValue(inputId){
    return document.getElementById(inputId)['value'];
}

async function getDirectoryValue(e, inputId, renderFiles){
    e.preventDefault();
    const element:InputElement = document.getElementById(inputId);
    element.blur();
    let rerouteTo:string = await openDirectoryPicker(configDialogState.application, renderFiles);
    element.setAttribute('value', rerouteTo);
}

function returnIfExists(value){
    return value ? value : '';
}